.\"	$Id$
.\"
.\" Copyright (c) 2013--2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: June 20 2017 $
.Dt SBLG 1
.Os
.Sh NAME
.Nm sblg
.Nd simple off-line blog utility
.Sh SYNOPSIS
.Nm sblg
.Op Fl acjlLr
.Op Fl C Ar file
.Op Fl o Ar file
.Op Fl s Ar sort
.Op Fl t Ar template
.Ar
.Sh DESCRIPTION
The
.Nm
utility knits together XML articles and templates in a number of ways.
.Bl -bullet
.It
Standalone mode
.Pq Fl c
links single articles with a template with an article stub, which is
filled in with the article.
For example,
.Qq sblg -c foo.xml bar.xml
creates
.Pa foo.html
and
.Pa bar.html
from a template populated by the
.Pa foo.xml
and
.Pa bar.xml
article contents, respectively.
.It
Blog amalgamation (default) mode links multiple articles with a template
consisting of articles and navigation stubs.
For example,
.Qq sblg -o foo.html bar.html baz.html
links
.Pa bar.html
and
.Pa baz.html
into
.Pa foo.html
from a template.
.It
Atom amalgamation mode
.Pq Fl a
links multiple articles with an Atom feed template.
.It
JSON amalgamation mode
.Pq Fl j
formats all articles as a JSON feeed.
.It
Standalone amalgamation mode
.Pq Fl C
links multiple articles in standalone style, i.e., multiple navigation
stubs, a single article stub.
For example,
.Qq sblg -o foo.html -C bar.html baz.html bar.html
will show only
.Pa bar.html
in the article list of
.Pa foo.html ,
but both
.Pa bar.html
and
.Pa baz.html
in its navigation.
You can also use
.Fl L
to run the process for each input file (much faster).
.It
Tag-listing mode with
.Fl l .
.El
.Pp
By default,
.Nm
operates in blog amalgamation mode as if
.Qq sblg -o blog.html -t blog-template.xml ...
were specified.
Its arguments are as follows:
.Bl -tag -width Ds
.It Fl a
Creates an Atom feed amalgamation from its input files.
.It Fl c
Create standalone articles instead of merging together articles into an
amalgamation.
.It Fl l
Instead of emitting any output files, simply process the input and
report a table of tags.
This table consists of the input file name, a tab, then the tag.
.Pq Also known as article-major order.
The tag has escaped white-space printed as unescaped.
You can also use
.Fl r
to have tag-major order and
.Fl j
for JSON output.
.It Fl r
Print the
.Fl l
tag listing in
.Dq tag-major
order wherein the first column is the tag and the second column is the
article.
If the
.Fl j
flag is specified, this is JSON formatted.
.It Fl j
JSON output mode.
This behaves as in blog amalgamation mode, but outputs JSON instead of
XML.
If
.Fl l
is specified, the tag listing will be displayed in JSON instead.
See
.Sx JSON Schema
for details.
.It Fl C Ar file
Like
.Fl c ,
but creating a blog amalgamation.
In effect, an amalgamation with a single
.Li <article data-sblg-article="1">
for the
.Ar file
while using the remaining arguments are other files used in
.Li <nav data-sblg-nav="1"> .
.It Fl L
Like
.Fl C ,
but acting on all input files, translating the input to output files
such as in
.Fl c
without
.Fl o .
If there are multiple articles in an output file, the output is
recreated for each (so only the last will remain).
So running with
.Dq article0.xml article1.xml
will produce
.Dq article0.html article1.html
as if
.Fl C
were seperately specified for both.
This avoids needing to parse all inputs for each input.
.It Fl o Ar file
Output file.
If unspecified, standalone articles have
.Li .html
appended to the input file name, unless the input file extension is
.Li .xml ,
in which case the
.Li .xml
is replaced by
.Li .html .
If multiple input files are specified,
.Fl o
is ignored.
If unspecified for the blog amalgamation,
.Ar blog.html
is used by default.
If unspecified for the Atom feed or JSON amalgamation,
.Ar atom.xml
or
.Ar blog.json ,
respectively,
is used by default.
Use
.Fl o Ar \-
for standard output.
.It Fl s Ar sort
Change how articles are sorted before being written into navigation or
article entries.
The default is
.Ar date ,
which sorts newest-oldest by date.
You can also specify
.Ar filename ,
which sorts in increasing A-Z alphabetical order of the source filename.
Lastly,
.Ar cmdline
does not sort and uses the command-line order.
.It Fl t Ar template
Template for standalone or amalgamation files.
If unspecified, defaults to
.Ar article-template.xml
for
.Fl c ,
.Ar atom-template.xml
for
.Fl a ,
and
.Ar blog-template.xml
otherwise.
.It Ar
Input files.
In standalone mode with
.Fl c ,
input XML files are merged with a template into an output file.
Otherwise, multiple input files are merged into a single amalgamation.
.El
.Pp
All input must be well-formed XML.
HTML is assumed only with the default suffix re-write rule for
.Fl c
without
.Fl o .
Input articles may be XML fragments or full documents: only the
.Li <article data-sblg-article="1">
tree within the article is considered.
.Ss Article Input
Article input files consist of XML fragments or whole documents.
They usually consist of the following within the document:
.Bd -literal
<article data-sblg-article="1">
  <header>
    <h1>Article Name</h1>
    <address>Author Name</address>
    <time datetime="2013-06-29">29 June, 2013</time>
  </header>
  <aside>
    This is used as the feed <b>abstract</b>.
  </aside>
  <p>
    Some text in the <b>content</b>.
    <img src="foo.jpg" alt="An image for the feed" />
  </p>
</article>
.Ed
.Pp
When processed with
.Nm ,
all data outside of the
.Li <article data-sblg-article="1">
element is discarded.
Then the article is scanned for the following:
.Bl -bullet
.It
the article title (both as text data only and inclusive of markup) is
extracted from the first
.Li <hn>
.Pq header 1\(en4 ;
.It
the article publication date is extracted from the datetime attribute of
the first
.Li <time>
(which must be a date, YYYY-MM-DD, or time, YYYY-MM-DDTHH:MM:SSZ)
interpreted in UTC;
.It
the author (both as text data only and inclusive of markup) from the
first
.Li <address> ;
the first
.Li <aside>
is used for the feed abstract; and
.It
the first
.Li <img>
is associated as the article's image.
.El
.Pp
If unspecified, the default article title text (and mark-up) is
.Qq Untitled article ,
the default author text (and mark-up) is the
.Qq Unknown author ,
the publication time is set to the document's file-system creation time,
the abstract is left empty, and the image is empty.
.Pp
All content is recorded in case the
.Li data-sblg-content
Boolean value is used in an Atom feed.
.Pp
There are a number of special attributes that are recognised in the
input file.
.Bl -tag -width Ds
.It Li data-sblg-img
A URL that overrides the first
.Li <img>
link to be the image associated with the article.
It doesn't matter where this appears: it will always override any images
in the article.
.It Li data-sblg-lang
This tag may only be specified on the article element and specifies one
or more space-separated languages for the document.
You can escape spaces with a backslash
.Pq Dq \e
if you have spaces in the tag name.
These languages are removed in the
.Dq stripping
operations for the
.Sx Tag Symbols .
.It Li data-sblg-sort
Override the article's position relative to other articles.
This can be either
.Li first
or
.Li last .
If multiple articles have the same sort override, they are ordered in
the natural way.
.It Li data-sblg-tags
This tag may be specified on any element within the article and consists
of space-separated tag names.
You can escape spaces with a backslash
.Pq Dq \e
if you have spaces in the tag name.
These tags are extracted for navigation tag operation.
It may not contain any tabs.
.El
.Pp
There may be be multiple articles within a single document, for example,
.Bd -literal
<articles>
  <article data-sblg-article="1"></article>
  <article data-sblg-article="1"></article>
  <article data-sblg-article="1"></article>
</articles>
.Ed
.Pp
The element(s) containing the articles is ignored.
If you have multiple articles and are using
.Fl c ,
only the first article is compiled.
.Ss Standalone Template
The standalone template file must be a well-formed XML file where the
first
.Li <article data-sblg-article="1">
element is replaced by the article text.
All of this element's children are removed.
.Bd -literal
<body>
  <header>This consists of a single blog entry.</header>
  <article>This is kept.</article>
  <article data-sblg-article="1">This is removed.</article>
  <footer>Something.</footer>
</body>
.Ed
.Pp
See
.Sx Tag Symbols
for a list of symbols that will be replaced if found in attribute value
or textual contexts.
.Ss Blog Amalgamation Template
The amalgamation template file must also be a well-formed XML file where
each
.Li <article data-sblg-article="1">
element is replaced by ordered (by default, newest to oldest) article
contents.
If there aren't enough articles, the element is removed.
Furthermore,
.Li <nav data-sblg-nav="1">
elements are replaced by the same list of articles within an
unordered list.
.Pp
Usually, the
.Li <article>
tags are used for displaying full articles, while
.Li <nav>
tags are used for displaying navigation to articles, such as just their
titles, dates, and links.
.Bd -literal
<body>
  <header>This consists of two blog entries.</header>
  <nav data-sblg-nav="1" />
  <article data-sblg-article="1" />
  <article data-sblg-article="1" />
  <footer>Something.</footer>
</body>
.Ed
.Pp
Each
.Li <article>
will be followed by a
.Pq permanent link
anchor within a
.Li <div>
with the custom class
.Qq data-sblg-permlink .
.Em Note :
the permanent link is set to the article name, so if you specify an XML
file, it will be to an XML file!
.Pp
The navigation element may contain several attributes.
The Boolean
.Li data-sbgl-navcontent
and
.Li data-sbgl-navxml
attributes make the mark-up content of the
.Li <nav>
be processed as specified in
.Sx Tag Symbols .
If not specified,
.Nm
populates the list with article title text in a link and the publication
date.
The
.Li data-sbgl-navxml
attribute does not print any additional
.Li <nav> ,
.Li <ul> ,
or
.Li <li>
HTML tags and can be used to generate custom XML files, such as sitemaps.
If the
.Li <nav>
element contains a positive integer
.Li data-sblg-navsz
attribute, this is used to limit the number of navigation entries.
Finally, if the
.Li data-sblg-navtag
is specified, only articles with matching tags are shown.
You can specify multiple space-separated tags, for instance,
.Li data-sblg-navtag="foo bar"
will search for foo or bar.
Tags to be matched against are extracted from the space-separated
.Li data-sblg-tags
element of each article's topmost
.Li <article>
element.
Lastly, the
.Li data-sblg-navstart
attribute specifies how many articles will skip being displayed (so if
you have tags, it will only account for articles that would meet those
tags) before showing the first navigation entry.
This starts at one (a value of zero is the same as a value of one).
.Pp
The article element may contain only the
.Li data-sblg-articletag
attribute.
This is similar in function to the
.Li data-sblg-navtag
attribute in limiting displayed articles to those matching the
space-separated tags.
You may also set a Boolean
.Li data-sblg-permlink
attribute that stipulates whether the permanent link is specified.
.Ss Standalone Amalgamation Template
This is identical to the
.Sx Blog Amalgamation Template
except that a single article is noted with
.Fl C ,
and this is the only article displayed in the article stub.
In the given example,
.Bd -literal
<body>
  <header>This consists of two blog entries.</header>
  <nav data-sblg-nav="1" />
  <article data-sblg-article="1" />
  <article data-sblg-article="1" />
  <footer>Something.</footer>
</body>
.Ed
.Pp
the navigation would be populated by all articles, but only the first
article stub would be filled in with the specified article.
The second would be removed.
.Pp
.Em Note :
this follows the usual rules of
.Li data-sblg-articletag ,
so if the article you specify with
.Fl C
doesn't have the correct tag, it won't inline the article.
.Ss Atom Amalgamation Template
The Atom template file must be a well-formed XML file where each
.Li <entry>
element with a Boolean
.Li data-sblg-entry
attribute is replaced by ordered (newest to oldest) article information.
If there aren't enough articles, the element is removed.
.Bd -literal
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Example Feed</title>
  <link href="http://example.org/feed/" rel="self" />
  <link href="http://example.org/" />
  <updated data-sblg-updated="1" />
  <id data-sblg-id="1" />
  <entry data-sblg-entry="1" />
  <entry data-sblg-entry="1" />
  <entry data-sblg-entry="1" />
</feed>
.Ed
.Pp
The
.Li <updated>
element with a Boolean
.Li data-sblg-updated
attribute is replaced with the newest article date (or the current date,
if no articles are listed).
The
.Li <id>
element with a Boolean
.Li data-sblg-id
attributed is replaced with an identifier in the form of
.Li tag:domain,2013:path ,
where the domain is initialised to the current domain or extracted from
the
.Li <link>
to the self.
The path is also extracted from the self
.Li <link> ,
initialised to the root path
.Sq \&/ .
.Pp
Each
.Li <entry>
element with a Boolean
.Li data-sblg-entry
attribute is filled in with a
.Li <title> ,
.Li <id>
.Pq in tag format ,
.Li <author> ,
HTML
.Li <content>
.Pq specified in the article as an Ao aside Ac ,
and alternate
.Li <link> .
If the
.Ar entry
element contains a false
.Li data-sblg-altlink
Boolean attribute, the alternate
.Li <link>
is not printed.
If it contains a true
.Li data-sblg-striplink
Boolean attribute, the alternate link (if requested) has its directory
part stripped and is assumed to be in the root directory.
Furthermore, if a true
.Li data-sblg-content
Boolean attribute exists, the article's contents (everything within the
.Li <article data-sblg-article="1"> )
are inlined within the
.Li <content>
element with type
.Li html .
.Pp
No
.Sx Tag Symbols
are processed.
.Ss JSON Schema
.Nm
can produce a JSON amalgamation with the
.Fl j
flag.
The schema is documented in
.Pa @SHAREDIR@/schema.json .
If
.Fl l
is specified, the output schema is simply an array as follows.
Let
.Pa source1.xml
and
.Pa source2.xml
be input files with a variety of tags.
.Bd -literal
[
 {"src": "source1.xml",
  "tags": ["tag1","tag2"]},
 {"src": "source2.xml",
  "tags": ["tag1"]}
]
.Ed
.Pp
If, however,
.Fl r
is also specified, the reverse format is used:
.Bd -literal
[
 {"tag": "tag1",
  "srcs": ["source1.xml","source2.xml"]},
 {"tag": "tag2",
  "srcs": ["source1.xml"]}
]
.Ed
.Ss Tag Symbols
Within the template for
.Fl c
or
.Fl C ,
or in any article contents written (either into an article or navigation
entry), the following special strings are replaced.
These symbols concern the current article being processed: in a
navigation entry, or as article contents.
In the event of the positional
.Dq next
and
.Dq prev
symbols, these refer to the article's position within the input
articles.
Obviously,
.Fl c
has only a single article.
.Pp
In general, these must be considered strict values, e.g.,
.Li ${sblg-aside}
and not
.Li ${ sblg-aside } .
Some symbols accept optional arguments, which have the format
.Li ${sblg-tags|argument} .
Here,
.Li \&|argument
may be omitted.
.Bl -tag -width -Ds
.It Li ${sblg-aside}
The article's first aside with markup.
.It Li ${sblg-asidetext}
The article's first aside, textual parts only.
.It Li ${sblg-author}
The article's author with markup.
.It Li ${sblg-authortext}
The article's author, textual parts only
.It Li ${sblg-base}
The full filename (including directory) with the last suffix part
chopped off.
For example,
.Pa foo/bar.xml
becomes
.Pa foo/bar .
The
.Li ${sblg-stripbase}
variant will strip off the directory part and any sufix.
For example,
.Pa foo/bar.xml
becomes
.Pa bar .
The
.Li ${sblg-striplangbase}
variant will also strip the language.
For example, if
.Dq en
language was specified on the article,
.Pa foo/bar.en.xml
becomes
.Pa bar .
.It Li ${sblg-date}
The publication date as YYYY-MM-DD (UTC).
.It Li ${sblg-datetime}
The publication date and time as YYYY-MM-DDTHH:MM:SSZ (UTC).
.It Li ${sblg-datetime-fmt[|fmt]}
A human-readable representation of the date and, if specified, time in
local time.
This accepts an optional format string passed to
.Xr strftime 3 .
If the format string is empty or
.Dq auto ,
a human-readable date
.Pq with Li %x
or date-time
.Pq Li %c
is printed.
.It Li ${sblg-img}
The article's associated image.
This will be an empty string if no image was specified.
.It Li ${sblg-first-base}
The first (newest) base name in the list of articles.
There are also
.Li ${sblg-first-stripbase}
and
.Li ${sblg-first-striplangbase}
variants.
.Pq See Li ${sblg-base} .
.It Li ${sblg-last-base}
The last (oldest) base name in the list of articles.
There are also
.Li ${sblg-last-stripbase}
and
.Li ${sblg-last-striplangbase}
variants.
.Pq See Li ${sblg-base} .
.It Li ${sblg-next-base}
The next base name when chronologically ordered from newest to oldest,
wrapping back to the beginning for the last.
There are also
.Li ${sblg-next-stripbase}
and
.Li ${sblg-next-striplangbase}
variants.
.Pq See Li ${sblg-base} .
.It Li ${sblg-pos}
The position (from 1) of the articles actually shown.
(So if
.Li data-sblg-navstart
is used, this will still show 1.)
This is only valid in a
.Li <nav data-sblg-nav="1">
context.
.It Li ${sblg-prev-base}
The previous base name when chronologically ordered from newest to
oldest, wrapping back to the beginning for the last.
There are also
.Li ${sblg-prev-stripbase}
and
.Li ${sblg-prev-striplangbase}
variants.
.Pq See Li ${sblg-base} .
.It Li ${sblg-source}
The source file when passed for parsing.
.It Li ${sblg-tags[|tagspec]}
List of unique tags in the article, optionally filtered by those having
the prefix
.Li tagspec .
If the prefix is not specified, all tags.
Each tag (e.g., TAG) is listed as
.Li <span class="sblg-tag">TAG</span> .
If no tags were found, a single
.Li <span class="sblg-tags-notfound"></span>
is emitted.
.It Li ${sblg-title}
The article title with markup.
.It Li ${sblg-titletext}
The article title, textual parts only.
.It Li ${sblg-url}
The output filename, which is empty for standard output.
.El
.Pp
Be careful in using these: the contents are copied directly, so if
specifying a value within an HTML attribute that has a double-quote, the
attribute will be prematurely closed.
.Sh FILES
.Bl -tag -width Ds
.It Pa article-template.xml
Default template for creating articles with
.Fl c .
.It Pa atom-template.xml
Default template for creating atom feeds with
.Fl a .
.It Pa blog-template.xml
Default template for creating a front page.
.El
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
First, create standalone HTML5 files
.Pq filled-in Li <article data-sblg-article="1">
from article fragments.
An
.Pa article-template.xml
file is assumed to exist.
This will create
.Pa article1.html
and
.Pa article2.html
from the re-write rule for the XML suffix.
.Pp
.Dl % sblg -c article1.xml article2.xml
.Pp
Next, merge formatted files into a front page.
A
.Pa blog-template.xml
file is assumed to exist.
.Pp
.Dl % sblg -o index.html article1.html article2.html
.Pp
This will create
.Pa index.html
with filled-in
.Li <article data-sblg-article="1">
and
.Li <nav data-sblg-nav="1">
elements.
.Pp
Combining the above two examples, we can specify a single article to be
displayed along with a full navigation as follows:
.Pp
.Dl % sblg -o article1.html -C article1.xml article1.xml article2.xml
.Pp
This will fill the contents of
.Pa article1.xml
into the
.Li <article data-sblg-article="1">
but use both (along with any others) in the
.Li <nav data-sblg-nav="1"> .
.Pp
If we want to make an output article as in the above example for each
element of the input, we could either run
.Fl C
for each input element, or use
.Fl L
to avoid re-running
.Nm
for each input article, which can be costly for many articles!
.Pp
.Dl % sblg -L article1.xml article2.xml
.Pp
This re-writes the suffixes and fills in the
.Li <article data-sblg-article="1">
for
.Pa article1.xml
in
.Pa article1.html ,
and so on.
For each of these, it will fill in
.Li <nav data-sblg-nav="1"> .
.Sh STANDARDS
Input files and templates must be properly-formed XML files.
Output files are guranteed to be XML as well.
The Atom file template must be well-formed; output is guaranteed to
satisfy the Atom 1.0 and Tag ID standards.
.Sh AUTHORS
The
.Nm
utility was written by
.An Kristaps Dzonsons ,
.Mt kristaps@bsd.lv .
.Sh CAVEATS
Boolean XML values must have an attribute specified.
In other words,
.Li <foo bar="1">
is valid, while
.Li <foo bar>
is not.
.Pp
Since input is recognised as XML and
.Em not
HTML5, special characters must be specified as unicode code-point
numbers and not HTML element names.
For example, you must use
.Li &#8230;
instead of
.Li &hellip; .
