<!DOCTYPE html>
<html lang="en">
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta charset="utf-8" /> 
		<title>sblg: static blog utility</title>
		<link rel="alternate" href="atom.xml" type="application/atom+xml" title="sblg Article and Version Feed" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" />
		<link rel="stylesheet" href="index.css" />
		<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
	</head>
	<body itemscope="itemscope" itemtype="http://schema.org/SoftwareApplication">
		<nav>
			<div class="top">
				<a href="https://www.bsd.lv">BSD.lv</a> 
				<span itemprop="applicationCategory">tools for text processing</span>: 
				<a href="https://kristaps.bsd.lv/lowdown">lowdown</a>,
				<a href="https://kristaps.bsd.lv/sblg">sblg</a>,
				<a href="https://mandoc.bsd.lv">mandoc</a>
			</div>
			<div>
				<h1>
					sblg <span>&#8211; static blog utility</span>
				</h1>
			</div>
			<div class="nav">
				<a id="nav-gears" itemprop="downloadURL" href="snapshots/sblg.tar.gz"><i class="fa fa-fw fa-gears"></i></a>
				<a id="nav-lock" href="snapshots/sblg.tar.gz.sha512"><i class="fa fa-fw fa-lock"></i></a>
				<a id="nav-file" href="snapshots"><i class="fa fa-fw fa-file-o"></i></a>
				<a id="nav-rss" href="atom.xml"><i class="fa fa-fw fa-rss"></i></a>
				<a id="nav-github" href="https://github.com/kristapsdz/sblg"><i class="fa fa-fw fa-github"></i></a>
				<span class="explain">
					<span id="explain-gears">Download source</span>
					<span id="explain-lock">Download checksum</span>
					<span id="explain-file">Source archive</span>
					<span id="explain-rss">Atom feed</span>
					<span id="explain-github">GitHub repository</span>
				</span>
			</div>
		</nav>
		<article>
			<p class="intro">
				<span itemprop="name" class="nm">sblg</span> is <span itemprop="description">a utility for creating static
					blogs</span>. 
				It knits together articles with templates to generate static HTML files,
				Atom feeds, and JSON files.
				It's built for use with <a href="https://man.openbsd.org/make.1">make(1)</a>.
				No PHP, no database:
				just a simple <span itemprop="operatingSystem">UNIX</span> tool for pulling data from articles and
				populating templates.
			</p>
			<h3>
				how it works
			</h3>
			<p>
				You write your HTML articles and templates. 
				<a href="sblg.1.html">sblg(1)</a> pulls data from the articles and merges it into the templates.
				(This is all usually orchestrated with a <a href="#makefile">Makefile</a>.)
				That's it.
			</p>
			<p>
				There are two basic ways of populating templates: a <i>standalone</i> mode, which pastes a single
				article into a template; and a <i>blog</i> mode, which pastes multiple
				articles&#8212;like a blog front page.  
				Blog mode can merge entire articles as well as just article snippets and metadata for navigation
				and summary purposes.
				That's what this page does.
				You can also do specialty modes of Atom and JSON feeds&#8212;also part of this page.
			</p>
			<p>
				To get started, download <a href="snapshots/sblg.tar.gz">sblg.tar.gz</a> (<a
					href="snapshots/sblg.tar.gz.sha512">SHA512</a>), decompress, run <code class="prettyprint
					lang-sh">./configure</code> then <code class="prettyprint lang-sh">make install</code>.
				<nav data-sblg-nav="1" data-sblg-navxml="1" data-sblg-navsz="1" data-sblg-navtag="version">
					The current version is <strong><span itemprop="softwareVersion">${sblg-titletext}</span></strong>,
					released on
					<strong><time itemprop="dateModified" datetime="${sblg-datetime}">${sblg-date}</time></strong>.
				</nav>
				Alternatively, use the <a href="https://github.com/kristapsdz/sblg">GitHub</a> repository or your operating
				system's package manager (<a href="https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/www/sblg/">OpenBSD</a>, 
				<a href="https://github.com/kristapsdz/homebrew-repo">Homebrew</a>, etc.).
			</p>
			<p>
				<span class="nm">sblg</span> is an <a href="http://opensource.org/licenses/ISC"
					rel="license">open source</a> ISO C utility that depends only on <a
					href="http://expat.sourceforge.net/">libexpat</a>.
				It is a <a href="https://www.bsd.lv">BSD.lv</a> project.
			</p>
			<h3>
				latest version
			</h3>
			<nav data-sblg-nav="1" data-sblg-navtag="version" data-sblg-navcontent="1" data-sblg-navsz="1">
				<div>
					<time datetime="${sblg-datetime}">${sblg-datetime-fmt}</time>: 
					version ${sblg-titletext}
				</div>
				<div>
					${sblg-aside}
				</div>
			</nav>
			<div class="seeall">
				(<a href="archive.html">See all versions</a>.)
			</div>
			<h3>
				output modes
			</h3>
			<p>
				<a href="sblg.1.html">sblg(1)</a> formats its output in a variety of ways.
				The most commonly used are <i>blog</i> and <i>combined</i> modes.
				These are also used in the templates installed with the system, all
				of which are device-independent, have feeds, microdata, etc.
			</p>
			<div class="templates">
				<figure>
					<a href="examples/simple/index.html"><img src="template1.jpg" alt="" /></a>
					<figcaption>
						Simple <a href="examples/simple/index.html">page-per-article</a> template.
					</figcaption>
				</figure>
				<figure>
					<a href="examples/simple-frontpage/index.html"><img src="template2.jpg" alt="" /></a>
					<figcaption>
						Simple <a href="examples/simple-frontpage/index.html">front-page</a> template.
					</figcaption>
				</figure>
			</div>
			<h4>
				standalone mode
			</h4>
			<figure>
				<img src="index1.svg" alt="standalone mode graph" />
			</figure>
			<p>
				Articles are just content within the <code class="prettyprint lang-html">&lt;article
					data-sblg-article="1"&gt;</code> tag of an HTML (or really XML) document.
				<a href="sblg.1.html">sblg(1)</a> pulls articles and article metadata for populating navigation
				elements and article elements in the templates.
				Some important values, such as the document title, are extracted and may be filled in to the template.
				You can also set custom variables, such as <q>foo</q> in the following example article.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-html">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;article data-sblg-article="1"&gt;
  &lt;header data-sblg-set-foo="bar"&gt;
    &lt;h1&gt;first hN sets document title&lt;/h1&gt;
    &lt;address&gt;sets author name&lt;/address&gt;
    &lt;-- the datetime being the article's date&#8230; /--&gt;
    &lt;time datetime="2014-04-12"&gt;2014-04-12&lt;/time&gt;
  &lt;/header&gt;
  &lt;aside&gt;
    This is pulled out for the page synopsis.
  &lt;/aside&gt;
  &lt;p&gt;
    And here we have some &lt;q&gt;content&lt;/q&gt;.
  &lt;/p&gt;
&lt;/article&gt;</pre>
			</div>
			<p>
				You'll also need a template.
				For standalone mode, this is just a regular HTML file where the <code class="prettyprint
					lang-html">&lt;article data-sblg-article="1"&gt;</code> tag is replaced by the page
				contents.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;&lt;title&gt;${sblg-titletext}&lt;/title&gt;&lt;/head&gt;
  &lt;body class="${sblg-get|foo}"&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
			</div>
			<p>
				There are all sorts of things documented in <a href="sblg.1.html">sblg(1)</a> that templates can fill in as
				extracted from article text.
				In the above example, a variable is used in the <code class="prettyprint lang-html">&lt;title&gt;</code> element
				and expands to the title in the source <code class="prettyprint lang-html">&lt;h1&gt;</code> element.
			</p>
			<p>
				This works well for putting simple documents into a template.
				But what if we want to have these documents relate to each other, or have a single document relate to multiple
				articles?
				That's where blog mode comes into play.
			</p>
			<h4>
				blog mode
			</h4>
			<figure>
				<img src="index2.svg" alt="blog mode graph" />
			</figure>
			<p>
				Blog mode is similar to standalone; however, you can also specify <code
					class="prettyprint lang-html">&lt;nav data-sblg-nav="1"&gt;</code> to fill in meta-data
				from all articles passed into the command.
				And unlike in standalone mode, you can't willy-nilly use <code class="prettyprint lang-sh">${sblg-title}</code>
				variables in the global template scope, as it's not clear to which article they'd refer.
				The <code class="prettyprint lang-html">&lt;article&gt;</code> elements will be filled in with articles&#8212;as
				many as you stipulate&#8212;there, as in the navigation, you can use the <code class="prettyprint
					lang-sh">${sblg-title}</code> for the currently-printed article.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;&lt;title&gt;My Blarg&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;nav data-sblg-nav="1"&gt;&lt;/nav&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
			</div>
			<p>
				A Makefile makes this easy.
				Pretend that your articles (<a href="article1.xml">article1.xml</a>, <a
					href="article2.xml">article2.xml</a>) are source code.
				Then object files (<a href="article1.html">article1.html</a>, <a
					href="article2.html">article2.html</a>) are compiled from single articles and a
				template, <a href="article.xml">article.xml</a>.
				Binaries (<a href="index.html">index.html</a> are compiled from object files (or directly from
				sources) and a template, <a href="index.xml">index.xml</a>.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-sh">.SUFFIXES: .xml .html
XMLS = <a href="article1.xml">article1.xml</a> <a href="article2.xml">article2.xml</a>
ARTICLES = <a href="article1.html">article1.html</a> <a href="article1.html">article2.html</a>
all: <a href="index.html">index.html</a> $(ARTICLES)
<a href="index.html">index.html</a>: <a href="index.xml">index.xml</a> $(ARTICLES)
	sblg -o $@ -t <a href="index.xml">index.xml</a> $(ARTICLES)
.xml.html:
	sblg -o $@ -t <a href="article.xml">article.xml</a> $&lt;</pre>
			</div>
			<p>
				Though it's more common (and efficient for the <code class="prettyprint lang-sh">make</code> for both standalone
				and blog mode sources to be the XML files.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-sh"><a href="index.html">index.html</a>: <a href="index.xml">index.xml</a> $(XMLS)
	sblg -o $@ -t <a href="index.xml">index.xml</a> $(XMLS)
.xml.html:
	sblg -o $@ -t <a href="article.xml">article.xml</a> $&lt;</pre>
			</div>
			<h4>
				combined mode
			</h4>
			<figure>
				<img class="larger" src="index3.svg" alt="combined mode graph" />
			</figure>
			<p>
				A common usage is to mix up standalone and blog mode, where each article has its own page, and each page
				refers to all other pages.
				This can be effected using <i>combined</i> mode (<code><b>-C</b></code>), which specifies a single
				article for display (like with standalone mode) but may reference multiple other articles in navigation.
			</p>
			<div class="prettyprint">
				<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;&lt;title&gt;Blarg page: ${sblg-titletext}&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;nav data-sblg-nav="1"&gt;&lt;/nav&gt;
    &lt;article data-sblg-article="1"&gt;&lt;/article&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
			</div>
			<p>
				For larger numbers of pages in combined mode, the cost of recompiling for each output can be quite high.
				So there's also a mode (<code><b>-L</b></code>) for producing one output for each input, given all inputs.
				These uses the default suffix mapping of replacing <code>.xml</code> with <code>.html</code> in the output.
			</p>
			<h3>
				some random articles
			</h3>
			<nav data-sblg-nav="1" data-sblg-navtag="howto" data-sblg-navcontent="1">
				<div>
					<time datetime="${sblg-datetime}">${sblg-date}</time>:
					<a href="${sblg-base}.html">${sblg-titletext}</a>
				</div>
				<div>
					${sblg-aside}
				</div>
			</nav>
		</article>
		<footer>
			&#169; 2013&#8211;2019, 
			<a itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person" rel="author" href="https://github.com/kristapsdz">
				<span itemprop="name">Kristaps Dzonsons</span>
			</a>
		</footer>
	</body>
</html>
